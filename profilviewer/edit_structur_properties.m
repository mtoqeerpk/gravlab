function [profil,session]=edit_structur_properties(windows,session,profil,struct)

%cette fonction affiche les propriétés de la structure sur struct
%l'utilisateur peut apporter des modifs fondamentales par cette voie.
%=> tout est bloqué tant que la fenetre est ouverte
%ATTENTION : aucune modification sur profil ne doit etre apportée en dehors
%du moment où l'utilisateur clic sur ok, ca permet de faire cancel ou croix

%% blockage de toute autre action
fields=fieldnames(windows.homefig.menu);
for field=1:length(fields)
    set(windows.homefig.menu.(fields{field}).parent,'enable','off')
end
%rend les structures non selectionné-nables, bloc les clics droits
exculdedeselect=[struct];%la structure struct reste selectionnée mais son clic droit est mort
block_structures(profil,exculdedeselect);

%% edition ici

%figure hote
hf_structedit=figure('position',[469   161   319   508],...
    'menubar','none',...
    'numbertitle','off',...
    'name',[profil.model(struct).name,' properties'],...
    'deletefcn',{@fini,'cancel'});
axis off
%boutton ok cancel
hb_ok=uicontrol('style'   ,'pushbutton',...
               'units'   ,'normalized',...
               'position',[.1,.01,.2,.05],...
               'string','ok',...
               'callback',{@fini,'ok'});
hb_cancel=uicontrol('style'   ,'pushbutton',...
               'units'   ,'normalized',...
               'position',[.5-.1,.01,.2,.05],...
               'string','cancel',...
               'callback',{@fini,'cancel'});
hb_help=uicontrol('style'   ,'pushbutton',...
               'units'   ,'normalized',...
               'position',[1-.1-.2,.01,.2,.05],...
               'string','help',...
               'callback','edit([session.HOME, session.SEP, ''help'', session.SEP, ''structure_properties.txt''])');
%panel d'edition
hp_structedit=uipanel('parent',hf_structedit,...
                      'units','normalized',...
                      'position',[0,.07,1,1-.07]);
%premiere colonne de bouttons (text)
ButtonHeight=.05;
Column1Width=.4;
Column2Width=.55;

%nom de la structure text et edit
i=1;
hb_nametxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','name',...
        'HorizontalAlignment','left');
hb_nameedit=uicontrol('parent',hp_structedit,...
        'style','edit',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',profil.model(struct).name,...
        'HorizontalAlignment','right',...
        'callback','set(gcf(), ''name'', [get(gco(), ''string''),'' properties''] )');
%nombre de sommet text et edit
i=i+1;
hb_ntxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','number of summits',...
        'HorizontalAlignment','left');
hb_nedit=uicontrol('parent',hp_structedit,...
        'style','edit',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',num2str(profil.model(struct).n),...
        'HorizontalAlignment','right',...
        'enable','off');
%densité text et edit
i=i+1;
hb_densitytxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','density',...
        'HorizontalAlignment','left');
hb_densityedit=uicontrol('parent',hp_structedit,...
        'style','edit',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',num2str(profil.model(struct).rho),...
        'HorizontalAlignment','right');
%order text et popup
i=i+1;
hb_ordertxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','order',...
        'HorizontalAlignment','left');
hb_orderpopup=uicontrol('parent',hp_structedit,...
        'style','popup',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',{'clockwise','counterclockwise'},...
        'HorizontalAlignment','right');
    %lecture du sens du polyg et attribution
    switch profil.model(struct).order
        case 'clockwise'
            set(hb_orderpopup,'value',1);
        case 'counterclockwise'
            set(hb_orderpopup,'value',2);
    end
    %callback : le popup vient d'etre modifié, si ca valeur ne correspond plus a l'ordre du polygone dans les cases, il faut le retourner
    set(hb_orderpopup,'callback',{@retourne_polyg,struct})
%color 
i=i+1;
hb_colortxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','color',...
        'HorizontalAlignment','left');
hb_coloredit=uicontrol('parent',hp_structedit,...
        'style','edit',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',...
                    sprintf('[ %3.1f , %3.1f , %3.1f ]',...
                            profil.model(struct).color(1),...
                            profil.model(struct).color(2),...
                            profil.model(struct).color(3)),...
        'HorizontalAlignment','center',...
        'Backgroundcolor',profil.model(struct).color,...
        'Foregroundcolor',1-profil.model(struct).color,...
        'callback',{@recolor});
    function recolor(src,evnt)
        rvb=str2num(get(hb_coloredit,'string'));
        eval(['try;',...
              '   set(hb_coloredit,',...
              '     ''Backgroundcolor'',',get(hb_coloredit,'string'),',',...
              '     ''Foregroundcolor'',[1 1 1]-',get(hb_coloredit,'string'),',',...
              '     ''string'',''',...
                         sprintf('[ %3.1f , %3.1f , %3.1f ]',rvb(1),rvb(2),rvb(3)),''');',...
              'catch;',...
              '   errordlg(sprintf(''The rgb code must be a 1 x 3 element vector between 0 and 1\n example [ 0.1 , 1.0 , 0.9 ]\nplease correct it!''));',...
              'end'])
    end
%color display
i=i+1;
        colordisplaylist={'transparent','by_density','by_order','by_color','superposition_high'};
        value=1;
        while ~strcmp(colordisplaylist{value},profil.model(struct).colordisplay)
            value=value+1;
        end
hb_colordisplaytxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','colordisplay',...
        'HorizontalAlignment','left');
hb_colordisplaypopup=uicontrol('parent',hp_structedit,...
        'style','popup',...
        'units','normalized',...
        'position',[Column1Width,1-i*ButtonHeight,Column2Width,ButtonHeight],...
        'string',colordisplaylist,...
        'value',value,...
        'HorizontalAlignment','right');
%polygone, nedit?
i=i+1;
    %pour ecrire le mot polygon
    hb_polygtxt=uicontrol('parent',hp_structedit,...
        'style','text',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','polygon',...
        'HorizontalAlignment','left');
    %cellule du contenu du tableau de bouttons
    hspstringcell=cell(profil.model(struct).n+1,3);
    hspstringcell{1,2}='x';
    hspstringcell{1,3}='y';
    for iii=1:profil.model(struct).n
        hspstringcell{iii+1,1}=num2str(iii);
        hspstringcell{iii+1,2}=sprintf('%f',profil.model(struct).polyg(iii,1));
        hspstringcell{iii+1,3}=sprintf('%f',profil.model(struct).polyg(iii,2));
    end
    %creation du panel glissant : base
    hsp_polygedit=setspanel('Parent',hf_structedit,...
                         'NormalizedPosition',[Column1Width,1-(i+9)*ButtonHeight,Column2Width,10*ButtonHeight],...
                         'StringCell',hspstringcell,...
                         'ColumnsWidth',[.1,.45,.45],...
                         'LinesHeight',[.07,.1*ones(1,profil.model(struct).n)],...
                         'HorizontalSliderHeightPixel',.1,...
                         'VerticalSliderStep',[1/(profil.model(struct).n+1),200/exp(.3*profil.model(struct).n+1)]);
    %ajustement des prop du panel glissant : types des bouttons et callbacks
    figure(windows.homefig.handle);
    hg_displaypoint=plot(0,0,'marker','.');
    for iii=1:profil.model(struct).n
        set(hsp_polygedit.ButtonHandles_locked(iii+1,1),...
            'style','pushbutton',...
            'callback',...
             {@showpoint,windows.homefig.handle,...
                         hg_displaypoint,...
                         hsp_polygedit.ButtonHandles_locked(iii+1,1),...             
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,2),'string')),...
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,3),'string')),...
                         'on'});
        set(hsp_polygedit.ButtonHandles_locked(iii+1,2:3),'enable','off')
    end
    set(hsp_polygedit.ButtonHandles_locked(1,1),...
           'style','pushbutton',...
           'callback',{@showpoint,windows.homefig.handle,hg_displaypoint,NaN,0,0,'off'});
    set(hsp_polygedit.ButtonHandles_locked(1,2:3),'style','text')
    
    %fonction qui affiche un point selectionné en jaune
    function showpoint(src,evnt,fig,handlept,handlebutton,xpt,ypt,visble)
        figure(fig);
        set(handlept,'Xdata',xpt,...
                     'Ydata',ypt,...
                     'marker','o',...
                     'markerfacecolor','y',...
                     'markeredgecolor','k',...
                     'visible',visble)
        for iii=1:profil.model(struct).n
            set(hsp_polygedit.ButtonHandles_locked(iii+1,1),...
                'Backgroundcolor',[.8,.8,.8]);
        end
        if ~isnan(handlebutton)
            set(handlebutton,'Backgroundcolor','y');
        end
    end

%permut polygup push and down
i=i+1;
hb_permutup=uicontrol('parent',hp_structedit,...
        'style','pushbutton',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','permutation up',...
        'HorizontalAlignment','left',...
        'Callback',{@permut,'up'});
i=i+1;
hb_permutdown=uicontrol('parent',hp_structedit,...
        'style','pushbutton',...
        'units','normalized',...
        'position',[0,1-i*ButtonHeight,Column1Width,ButtonHeight*5/6],...
        'string','permutation down',...
        'HorizontalAlignment','left',...
        'Callback',{@permut,'down'});
function permut(src,evnt,mode)
    switch mode
        case 'up'
            %permutation de la cellule d'info du sliding panel
            hspstringcell([1:profil.model(struct).n+1],[2:size(hspstringcell,2)])=hspstringcell([1,3:profil.model(struct).n+1,3],[2:size(hspstringcell,2)]);
        case 'down'
            %permutation de la cellule d'info du sliding panel
            hspstringcell([1:profil.model(struct).n+1],[2:size(hspstringcell,2)])=hspstringcell([1,profil.model(struct).n,2:profil.model(struct).n],[2:size(hspstringcell,2)]);
    end
    %modification du panel
    hsp_polygedit=setspanel(hsp_polygedit,'StringCell',hspstringcell);
    %reattribution des types de bouttons
    set(hg_displaypoint,'visible','off')
    for iii=1:profil.model(struct).n
        set(hsp_polygedit.ButtonHandles_locked(iii+1,1),...
            'style','pushbutton',...
            'callback',...
             {@showpoint,windows.homefig.handle,...
                         hg_displaypoint,...
                         hsp_polygedit.ButtonHandles_locked(iii+1,1),...             
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,2),'string')),...
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,3),'string')),...
                         'on'});
        set(hsp_polygedit.ButtonHandles_locked(iii+1,2:3),'enable','off')
    end
    set(hsp_polygedit.ButtonHandles_locked(1,1),...
           'style','pushbutton',...
           'callback',{@showpoint,windows.homefig.handle,hg_displaypoint,NaN,0,0,'off'});
    set(hsp_polygedit.ButtonHandles_locked(1,2:3),'style','text')
end
function retourne_polyg(src,evnt,struct)
    %je get l'etat du popup
    switch get(hb_orderpopup,'value')
        case 1
            order='clockwise';
        case 2
            order='counterclockwise';
    end
    %je lis l'etat courant du polygone dans les cases
    P=str2double(hspstringcell(2:profil.model(struct).n+1,2:3));
    switch  isclockwise(P)
        case 1
            currentorder='clockwise';
        case 0
            currentorder='counterclockwise';            
    end
    %le sens reel du polygone est dans currentorder
    if ~strcmp(order,currentorder)%ie : le popup a été changé, il faut mettre a jour current order et retourner le polygone
        currentorder=order;
        %retournement du polygone dans les case du sliding panel, ce sont ces cases qui seront lues quand on cliquera sur ok
        hspstringcell(2:profil.model(struct).n+1,2:3)=hspstringcell(profil.model(struct).n+1:-1:2,2:3);
        %modification du spanel
        hsp_polygedit=setspanel(hsp_polygedit,'StringCell',hspstringcell);
        %reattribution des types de bouttons
        set(hg_displaypoint,'visible','off')
        for iii=1:profil.model(struct).n
            set(hsp_polygedit.ButtonHandles_locked(iii+1,1),...
                'style','pushbutton',...
                'callback',...
                {@showpoint,windows.homefig.handle,...
                         hg_displaypoint,...
                         hsp_polygedit.ButtonHandles_locked(iii+1,1),...             
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,2),'string')),...
                         str2double(get(hsp_polygedit.ButtonHandles_locked(iii+1,3),'string')),...
                         'on'});
                     set(hsp_polygedit.ButtonHandles_locked(iii+1,2:3),'enable','off')
        end
        set(hsp_polygedit.ButtonHandles_locked(1,1),...
            'style','pushbutton',...
            'callback',{@showpoint,windows.homefig.handle,hg_displaypoint,NaN,0,0,'off'});
        set(hsp_polygedit.ButtonHandles_locked(1,2:3),'style','text')
    end
end

disp([datestr(now),' : system is busy (edit_structure_properties.m)'])
uiwait(hf_structedit);
disp([datestr(now),' : done'])


set(hg_displaypoint,'visible','off')
try
    set(hf_structedit,'deletefcn',[])
    close(hf_structedit)
    %si ca echoue c est que la figure est deja fermee...
end
%% mise a jour du profil et reactivation des action (selectionnabilité,clic droit...)
profil=refresh_profil(windows,profil,{'model'});

%% restoration des menus
for field=1:length(fields)
    set(windows.homefig.menu.(fields{field}).parent,'enable','on')
end

%% fonction de fin, on repart au niveau du uiwait
function fini(src,evnt,mode)
	switch mode
        case 'cancel'
            uiresume(hf_structedit);
        case 'ok'
            %si le mode est ok, on lit l'etat courant des propriétés et on
            %les attribut a profil, ssi il y a des differences, on rend la
            %session unsaved
            unsave=0;
            %name
                if ~strcmp(profil.model(struct).name,get(hb_nameedit,'string'))
                    profil.model(struct).name=get(hb_nameedit,'string');
                    unsave=1;
                end
            %number of summits, normalement identique car enable!!!
                if profil.model(struct).n~=str2num(get(hb_nedit,'string'))
                    profil.model(struct).n=str2num(get(hb_nedit,'string'));
                    unsave=1;
                end
            %density
                if profil.model(struct).rho~=str2num(get(hb_densityedit,'string')) && ~(isnan(profil.model(struct).rho) && isnan(str2num(get(hb_densityedit,'string'))))
                    profil.model(struct).rho=str2num(get(hb_densityedit,'string'));
                    unsave=1;
                end
            %order
               if get(hb_orderpopup,'value')==1
                   neworder='clockwise';
               elseif get(hb_orderpopup,'value')==2
                   neworder='counterclockwise';
               end
               if ~strcmp(neworder,profil.model(struct).order);
                   profil.model(struct).order=neworder;
                   unsave=1;
               end
            %color
            if sum(abs(profil.model(struct).color-str2num(get(hb_coloredit,'string'))))>0
                   if sum(abs(size(str2num(get(hb_coloredit,'string')))-[1,3]))>0 || ~isempty(find(str2num(get(hb_coloredit,'string'))>1.0 | str2num(get(hb_coloredit,'string'))<0.0))
                       errordlg(['the given rgb code (  ',get(hb_coloredit,'string'),'  ) is not correct, the color won''t be attribuated to your structure'])
                   else
                       profil.model(struct).color=str2num(get(hb_coloredit,'string'));
                       %unsave=1;
                   end
               end
            %colordisplay
               if ~strcmp(profil.model(struct).colordisplay,colordisplaylist{get(hb_colordisplaypopup,'value')})
                   profil.model(struct).colordisplay=colordisplaylist{get(hb_colordisplaypopup,'value')};
                   %unsave=1;
               end
            %polygon
                newpolyg=[];
                for iii=2:size(hsp_polygedit.ButtonHandles_locked,1)
                    newpolyg(iii-1,[1,2])=[str2double(get(hsp_polygedit.ButtonHandles_locked(iii,2),'string')),...
                                                             str2double(get(hsp_polygedit.ButtonHandles_locked(iii,3),'string'))];
                end
                if ~isempty(find(abs(newpolyg-profil.model(struct).polyg)>1e-3))%(newpolyg~=profil.model(struct).polyg))>0
                    profil.model(struct).polyg=[];
                    profil.model(struct).polyg=newpolyg;
                    unsave=1;
                end
            %s'il y a eu des modifs et que la session est a l'état "saved"
            if unsave==1 && session.saved==1
                session.saved=0;
                set(windows.homefig.handle,...
                'name',[get(windows.homefig.handle,'name'),'*'])
            end
            
            uiresume(hf_structedit);
    end
end

end %final